#!/usr/bin/env bash
# Date: 20140917
# Description: This script generates screencasts with audio; in webM format.
# Requirements: ffmpeg
# Author: Renich Bon Ciric <renich@woralelandia.com>
# License: GPLv3 or >

# config
threads='auto'
date=$( date +%Y%m%d-%H%M%S )
format='webm'                       # webm|mkv recommended
audio_codec='libvorbis'             # libvorbis|libfaac|aac recommended
audio_codec_options='-b:a 128k'
framerate=10
log_level='quiet'
name=${1:-screencast}
path=~/Videos/screencasts
resolution='hd1080'                 # hd1080|hd720 recommended


# functions
bootstrap() {
    # check if ffmpeg is present
    if [[ ! $( which ffmpeg ) ]]; then
        echo "You don't have ffmpeg installed. Please install it first."
        exit 1
    fi

    # check if dir exists
    if [[ ! -d ${path}  ]]; then
        mkdir -p -m 750 ${path};
    fi
}

clean_up() {
    echo
    echo "ending process with PID ${video_pid}"
    kill ${video_pid}
}

control_c() {
    clean_up
    exit $?
}

start_minicam() {
    ffplay \
        -mode realtime \
        -threads ${threads} \
        -loglevel ${log_level} \
        -f v4l2 \
        -framerate ${framerate} \
        -i /dev/video0 \
        -video_size 320x240 &

    video_pid=${!}
}

record_screen() {
    bootstrap

    echo "Recording screencast in ${path}/${date}-${name}.${format}; in ${resolution} @ ${framerate} FPS..."
    echo "Please, press 'q, <enter>' when done."

    ffmpeg \
        -strict -2 \
        -loglevel ${log_level} \
        -threads ${threads} \
        -f pulse \
            -i default \
        -f x11grab \
            -s ${resolution} \
            -i ${DISPLAY} \
        -c:v libvpx \
            -deadline good \
            -cpu-used 4 \
            -b:v 500k \
            -qmin 10 \
            -qmax 42 \
            -maxrate 500k \
            -bufsize 1000k \
            -skip_threshold 50 \
        -c:a ${audio_codec} \
            ${audio_codec_options} \
        ~/Videos/screencasts/${date}-${name}.${format}

    clean_up
}


# do
start_minicam
record_screen


# trap ctrl+c if it happens
trap control_c SIGINT

exit 0
